{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///Users/nobinsunny/Desktop/git-e/src/lib/dbConnect.ts"],"sourcesContent":["import mongoose from 'mongoose';\n\nif (!process.env.MONGODB_URI) {\n  throw new Error('Please define the MONGODB_URI environment variable inside .env.local');\n}\n\nconst MONGODB_URI = process.env.MONGODB_URI;\n\n/**\n * Global is used here to maintain a cached connection across hot reloads\n * in development. This prevents connections growing exponentially\n * during API Route usage.\n */\nlet cached = global.mongoose;\n\nif (!cached) {\n  cached = global.mongoose = { conn: null, promise: null };\n}\n\nasync function dbConnect() {\n  if (cached.conn) {\n    return cached.conn;\n  }\n\n  if (!cached.promise) {\n    const opts = {\n      bufferCommands: true,\n    };\n\n    cached.promise = mongoose.connect(MONGODB_URI, opts).then((mongoose) => {\n      return mongoose;\n    });\n  }\n\n  try {\n    cached.conn = await cached.promise;\n  } catch (e) {\n    cached.promise = null;\n    throw e;\n  }\n\n  return cached.conn;\n}\n\nexport default dbConnect;\n"],"names":[],"mappings":";;;AAAA;;AAEA,IAAI,CAAC,QAAQ,GAAG,CAAC,WAAW,EAAE;IAC5B,MAAM,IAAI,MAAM;AAClB;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C;;;;CAIC,GACD,IAAI,SAAS,OAAO,QAAQ;AAE5B,IAAI,CAAC,QAAQ;IACX,SAAS,OAAO,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AACzD;AAEA,eAAe;IACb,IAAI,OAAO,IAAI,EAAE;QACf,OAAO,OAAO,IAAI;IACpB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,MAAM,OAAO;YACX,gBAAgB;QAClB;QAEA,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa,MAAM,IAAI,CAAC,CAAC;YACzD,OAAO;QACT;IACF;IAEA,IAAI;QACF,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IACpC,EAAE,OAAO,GAAG;QACV,OAAO,OAAO,GAAG;QACjB,MAAM;IACR;IAEA,OAAO,OAAO,IAAI;AACpB;uCAEe"}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file:///Users/nobinsunny/Desktop/git-e/src/models/Product.ts"],"sourcesContent":["import mongoose, { Document, Schema } from 'mongoose';\n\ninterface IReview {\n  userId: mongoose.Types.ObjectId;\n  rating: number;\n  comment?: string;\n  createdAt: Date;\n}\n\nexport interface IProduct extends Document {\n  _id: mongoose.Types.ObjectId;\n  name: string;\n  description: string;\n  price: number;\n  imageUrl: string;\n  category: string;\n  stock: number;\n  ratings: number;\n  reviews: IReview[];\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nconst productSchema = new Schema<IProduct>({\n  name: {\n    type: String,\n    required: [true, 'Please provide a product name'],\n    trim: true,\n  },\n  description: {\n    type: String,\n    required: [true, 'Please provide a product description'],\n  },\n  price: {\n    type: Number,\n    required: [true, 'Please provide a product price'],\n    min: [0, 'Price cannot be negative'],\n  },\n  imageUrl: {\n    type: String,\n    required: [true, 'Please provide a product image URL'],\n  },\n  category: {\n    type: String,\n    required: [true, 'Please provide a product category'],\n  },\n  stock: {\n    type: Number,\n    required: [true, 'Please provide stock quantity'],\n    min: [0, 'Stock cannot be negative'],\n  },\n  ratings: {\n    type: Number,\n    default: 0,\n  },\n  reviews: [{\n    userId: {\n      type: Schema.Types.ObjectId,\n      ref: 'User',\n      required: true,\n    },\n    rating: {\n      type: Number,\n      required: true,\n      min: 1,\n      max: 5,\n    },\n    comment: String,\n    createdAt: {\n      type: Date,\n      default: Date.now,\n    },\n  }],\n}, {\n  timestamps: true,\n});\n\nexport default mongoose.models.Product || mongoose.model<IProduct>('Product', productSchema); "],"names":[],"mappings":";;;AAAA;;AAuBA,MAAM,gBAAgB,IAAI,yGAAA,CAAA,SAAM,CAAW;IACzC,MAAM;QACJ,MAAM;QACN,UAAU;YAAC;YAAM;SAAgC;QACjD,MAAM;IACR;IACA,aAAa;QACX,MAAM;QACN,UAAU;YAAC;YAAM;SAAuC;IAC1D;IACA,OAAO;QACL,MAAM;QACN,UAAU;YAAC;YAAM;SAAiC;QAClD,KAAK;YAAC;YAAG;SAA2B;IACtC;IACA,UAAU;QACR,MAAM;QACN,UAAU;YAAC;YAAM;SAAqC;IACxD;IACA,UAAU;QACR,MAAM;QACN,UAAU;YAAC;YAAM;SAAoC;IACvD;IACA,OAAO;QACL,MAAM;QACN,UAAU;YAAC;YAAM;SAAgC;QACjD,KAAK;YAAC;YAAG;SAA2B;IACtC;IACA,SAAS;QACP,MAAM;QACN,SAAS;IACX;IACA,SAAS;QAAC;YACR,QAAQ;gBACN,MAAM,yGAAA,CAAA,SAAM,CAAC,KAAK,CAAC,QAAQ;gBAC3B,KAAK;gBACL,UAAU;YACZ;YACA,QAAQ;gBACN,MAAM;gBACN,UAAU;gBACV,KAAK;gBACL,KAAK;YACP;YACA,SAAS;YACT,WAAW;gBACT,MAAM;gBACN,SAAS,KAAK,GAAG;YACnB;QACF;KAAE;AACJ,GAAG;IACD,YAAY;AACd;uCAEe,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,OAAO,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAW,WAAW"}},
    {"offset": {"line": 195, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 201, "column": 0}, "map": {"version":3,"sources":["file:///Users/nobinsunny/Desktop/git-e/src/app/api/products/search/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport dbConnect from '@/lib/dbConnect';\nimport Product from '@/models/Product';\n\nexport async function GET(request: Request) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const query = searchParams.get('q')?.toLowerCase();\n\n    console.log('Search query:', query);\n\n    if (!query) {\n      return NextResponse.json([]);\n    }\n\n    // Connect to database\n    await dbConnect();\n    console.log('Connected to MongoDB');\n\n    // Search products using MongoDB's text search and regex for partial matches\n    const products = await Product.find({\n      $or: [\n        { name: { $regex: query, $options: 'i' } },\n        { description: { $regex: query, $options: 'i' } },\n        { category: { $regex: query, $options: 'i' } }\n      ]\n    }).limit(10); // Limit to 10 results for better performance\n\n    console.log('Found products:', products.length);\n    \n    return NextResponse.json(products);\n  } catch (error) {\n    console.error('Search error:', error);\n    return NextResponse.json({ error: 'Failed to search products' }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,IAAI,OAAgB;IACxC,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,QAAQ,aAAa,GAAG,CAAC,MAAM;QAErC,QAAQ,GAAG,CAAC,iBAAiB;QAE7B,IAAI,CAAC,OAAO;YACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,EAAE;QAC7B;QAEA,sBAAsB;QACtB,MAAM,CAAA,GAAA,yHAAA,CAAA,UAAS,AAAD;QACd,QAAQ,GAAG,CAAC;QAEZ,4EAA4E;QAC5E,MAAM,WAAW,MAAM,0HAAA,CAAA,UAAO,CAAC,IAAI,CAAC;YAClC,KAAK;gBACH;oBAAE,MAAM;wBAAE,QAAQ;wBAAO,UAAU;oBAAI;gBAAE;gBACzC;oBAAE,aAAa;wBAAE,QAAQ;wBAAO,UAAU;oBAAI;gBAAE;gBAChD;oBAAE,UAAU;wBAAE,QAAQ;wBAAO,UAAU;oBAAI;gBAAE;aAC9C;QACH,GAAG,KAAK,CAAC,KAAK,6CAA6C;QAE3D,QAAQ,GAAG,CAAC,mBAAmB,SAAS,MAAM;QAE9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iBAAiB;QAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA4B,GAAG;YAAE,QAAQ;QAAI;IACjF;AACF"}},
    {"offset": {"line": 255, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}